[{"/Users/john/Documents/Github/NetflixPrimeNight/src/reportWebVitals.js":"1","/Users/john/Documents/Github/NetflixPrimeNight/src/components/bigcard/bigcard.js":"2","/Users/john/Documents/Github/NetflixPrimeNight/src/App.js":"3","/Users/john/Documents/Github/NetflixPrimeNight/src/index.js":"4","/Users/john/Documents/Github/NetflixPrimeNight/src/components/smallcard/smallcard.js":"5","/Users/john/Documents/Github/NetflixPrimeNight/src/request.js":"6"},{"size":362,"mtime":1611443290652,"results":"7","hashOfConfig":"8"},{"size":4432,"mtime":1611698520655,"results":"9","hashOfConfig":"8"},{"size":4381,"mtime":1611704103681,"results":"10","hashOfConfig":"8"},{"size":531,"mtime":1611443290652,"results":"11","hashOfConfig":"8"},{"size":3333,"mtime":1611540133391,"results":"12","hashOfConfig":"8"},{"size":1253,"mtime":1611711353262,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8t6jr2",{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/john/Documents/Github/NetflixPrimeNight/src/reportWebVitals.js",[],"/Users/john/Documents/Github/NetflixPrimeNight/src/components/bigcard/bigcard.js",["27","28"],"/Users/john/Documents/Github/NetflixPrimeNight/src/App.js",["29"],"import axios from 'axios'\nimport { useEffect, useState } from 'react'\nimport './App.css'\nimport SmallCard from './components/smallcard/smallcard'\nimport BigCard from './components/bigcard/bigcard'\nimport SearchBar from './components/searchbar/searchbar'\nimport { createDiscoverRequests, createSearchRequests } from './request'\nrequire('dotenv').config()\n\nfunction App() {\n    const [films, setFilms] = useState([])\n    const [cache, setCache] = useState([])\n    const [bigCardFlag, setBigCardFlag] = useState(false)\n    const [bigCardData, setBigCardData] = useState('')\n    const [search, setSearch] = useState('')\n\n    useEffect(() => {\n        async function fetchData() {\n            const reqArray = createDiscoverRequests(3)\n            const resultArray = []\n            axios\n                .all(reqArray)\n                .then(\n                    axios.spread((...responses) => {\n                        responses.forEach((response) => {\n                            let data = response.data.results\n                            // console.log(\n                            //     'Success',\n                            //     typeof data,\n                            //     data,\n                            //     response.data,\n                            // )\n                            resultArray.push(...data)\n                        })\n                        // console.log('submitted all axios calls', resultArray)\n                        setCache(resultArray)\n                        setFilms(resultArray)\n                        return resultArray\n                    }),\n                )\n                .catch((err) => console.log(err))\n        }\n        fetchData()\n    }, [])\n    useEffect(() => {\n        if (search === '') {\n            console.log('EMPTY')\n            setFilms(cache) //discover\n        } else {\n            //time to search w/ query\n            searchTMDB()\n        }\n    }, [search])\n\n    const searchTMDB = async () => {\n        const reqArray = createSearchRequests(4, search)\n        const resultArray = []\n        axios\n            .all(reqArray)\n            .then(\n                axios.spread((...responses) => {\n                    responses.forEach((response) => {\n                        let data = response.data.results\n                        //  console.log('Success', typeof data, data, response.data)\n                        resultArray.push(...data)\n                    })\n                    // console.log('submitted all axios calls', resultArray)\n                    let modifiedArray = resultArray.filter(\n                        (a) =>\n                            a.media_type !== 'person' &&\n                            a.poster_path !== null &&\n                            a.backdrop_path != null,\n                    )\n                    setFilms(modifiedArray)\n                    return modifiedArray\n                }),\n            )\n            .catch((err) => console.log(err))\n    }\n\n    const showBigCard = (value, filmType) => {\n        console.log(value, filmType)\n        setBigCardFlag(!bigCardFlag)\n        setBigCardData(value)\n    }\n\n    // console.log(bigCardFlag)\n\n    return (\n        <div className='App'>\n            {!bigCardFlag && (\n                <div className='bigContainer'>\n                    <SearchBar\n                        value={search}\n                        onChange={(e) => {\n                            setSearch(e.target.value)\n                        }}\n                    />\n                    <div className='container'>\n                        <div className='innerContainer'>\n                            {films.map((film) => (\n                                <SmallCard\n                                    key={film.id}\n                                    filmType={film?.media_type || 'movie'}\n                                    film={film}\n                                    logThis={showBigCard}\n                                />\n                            ))}\n                        </div>\n                    </div>\n                </div>\n            )}\n            {bigCardFlag && (\n                <BigCard\n                    filmType={bigCardData.filmType}\n                    filmID={bigCardData.id}\n                    togglePopup={() => setBigCardFlag(!bigCardFlag)}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default App\n","/Users/john/Documents/Github/NetflixPrimeNight/src/index.js",[],"/Users/john/Documents/Github/NetflixPrimeNight/src/components/smallcard/smallcard.js",["30","31","32"],"/Users/john/Documents/Github/NetflixPrimeNight/src/request.js",[],{"ruleId":"33","severity":1,"message":"34","line":15,"column":11,"nodeType":"35","messageId":"36","endLine":15,"endColumn":16},{"ruleId":"37","severity":1,"message":"38","line":43,"column":8,"nodeType":"39","endLine":43,"endColumn":10,"suggestions":"40"},{"ruleId":"37","severity":1,"message":"41","line":53,"column":8,"nodeType":"39","endLine":53,"endColumn":16,"suggestions":"42"},{"ruleId":"33","severity":1,"message":"43","line":13,"column":12,"nodeType":"35","messageId":"36","endLine":13,"endColumn":19},{"ruleId":"33","severity":1,"message":"44","line":16,"column":12,"nodeType":"35","messageId":"36","endLine":16,"endColumn":21},{"ruleId":"37","severity":1,"message":"45","line":35,"column":8,"nodeType":"39","endLine":35,"endColumn":14,"suggestions":"46"},"no-unused-vars","'image' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'filmID' and 'filmType'. Either include them or remove the dependency array.","ArrayExpression",["47"],"React Hook useEffect has missing dependencies: 'cache' and 'searchTMDB'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilms' needs the current value of 'cache'.",["48"],"'isHover' is assigned a value but never used.","'providers' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'filmType'. Either include it or remove the dependency array.",["49"],{"desc":"50","fix":"51"},{"desc":"52","fix":"53"},{"desc":"54","fix":"55"},"Update the dependencies array to be: [filmID, filmType]",{"range":"56","text":"57"},"Update the dependencies array to be: [cache, search, searchTMDB]",{"range":"58","text":"59"},"Update the dependencies array to be: [film, filmType]",{"range":"60","text":"61"},[1491,1493],"[filmID, filmType]",[1922,1930],"[cache, search, searchTMDB]",[1253,1259],"[film, filmType]"]